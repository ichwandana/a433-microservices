Creating network "a433-microservices_item-app" with driver "bridge"
Creating volume "app-db" with default driver
Creating item-app ... done
Creating item-db  ... done
Attaching to item-app, item-db
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] MongoDB starting : pid=1 port=27017 dbpath=/data/db 64-bit host=a48b55b028a5
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] db version v3.6.23
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] git version: d352e6a4764659e0d0350ce77279de3c1f243e5c
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2g  1 Mar 2016
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] allocator: tcmalloc
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] modules: none
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] build environment:
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten]     distmod: ubuntu1604
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten]     distarch: x86_64
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten]     target_arch: x86_64
item-db     | 2023-03-17T15:20:49.787+0000 I CONTROL  [initandlisten] options: { net: { bindIpAll: true } }
item-db     | 2023-03-17T15:20:49.788+0000 I STORAGE  [initandlisten] 
item-db     | 2023-03-17T15:20:49.788+0000 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
item-db     | 2023-03-17T15:20:49.788+0000 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
item-db     | 2023-03-17T15:20:49.788+0000 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=438M,cache_overflow=(file_max=0M),session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),compatibility=(release="3.0",require_max="3.0"),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),statistics_log=(wait=0),verbose=(recovery_progress),
item-db     | 2023-03-17T15:20:50.993+0000 I STORAGE  [initandlisten] WiredTiger message [1679066450:993926][1:0x7f769160ba40], txn-recover: Set global recovery timestamp: 0
item-app    | 
item-app    | > docker-software-delivery@1.0.0 preinstall /app
item-app    | > npx npm-force-resolutions
item-app    | 
item-db     | 2023-03-17T15:20:51.647+0000 I CONTROL  [initandlisten] 
item-db     | 2023-03-17T15:20:51.648+0000 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
item-db     | 2023-03-17T15:20:51.648+0000 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
item-db     | 2023-03-17T15:20:51.648+0000 I CONTROL  [initandlisten] 
item-db     | 2023-03-17T15:20:51.649+0000 I STORAGE  [initandlisten] createCollection: admin.system.version with provided UUID: 7cc8b1d6-5248-40e5-bc4c-3cd05fb28358
item-db     | 2023-03-17T15:20:51.868+0000 I COMMAND  [initandlisten] setting featureCompatibilityVersion to 3.6
item-db     | 2023-03-17T15:20:51.871+0000 I STORAGE  [initandlisten] createCollection: local.startup_log with generated UUID: cebdd600-d377-47f6-921b-742475036af6
item-db     | 2023-03-17T15:20:52.081+0000 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'
item-db     | 2023-03-17T15:20:52.081+0000 I NETWORK  [initandlisten] listening via socket bound to 0.0.0.0
item-db     | 2023-03-17T15:20:52.081+0000 I NETWORK  [initandlisten] listening via socket bound to /tmp/mongodb-27017.sock
item-db     | 2023-03-17T15:20:52.081+0000 I NETWORK  [initandlisten] waiting for connections on port 27017
item-db     | 2023-03-17T15:20:52.081+0000 I STORAGE  [LogicalSessionCacheRefresh] createCollection: config.system.sessions with generated UUID: 0c366985-666b-47ae-857c-3ac5e691d769
item-db     | 2023-03-17T15:20:52.454+0000 I INDEX    [LogicalSessionCacheRefresh] build index on: config.system.sessions properties: { v: 2, key: { lastUse: 1 }, name: "lsidTTLIndex", ns: "config.system.sessions", expireAfterSeconds: 1800 }
item-db     | 2023-03-17T15:20:52.454+0000 I INDEX    [LogicalSessionCacheRefresh]       building index using bulk method; build may temporarily use up to 500 megabytes of RAM
item-db     | 2023-03-17T15:20:52.463+0000 I INDEX    [LogicalSessionCacheRefresh] build index done.  scanned 0 total records. 0 secs
item-db     | 2023-03-17T15:20:52.463+0000 I COMMAND  [LogicalSessionCacheRefresh] command config.$cmd command: createIndexes { createIndexes: "system.sessions", indexes: [ { key: { lastUse: 1 }, name: "lsidTTLIndex", expireAfterSeconds: 1800 } ], $db: "config" } numYields:0 reslen:98 locks:{ Global: { acquireCount: { r: 2, w: 2 } }, Database: { acquireCount: { w: 2, W: 1 } }, Collection: { acquireCount: { w: 2 } } } protocol:op_msg 381ms
item-app    | npx: installed 6 in 6.426s
item-app    | audited 662 packages in 25.787s
item-app    | 
item-app    | 7 packages are looking for funding
item-app    |   run `npm fund` for details
item-app    | 
item-app    | found 97 vulnerabilities (20 low, 26 moderate, 41 high, 10 critical)
item-app    |   run `npm audit fix` to fix them, or `npm audit` for details
item-app    | 
item-app    | > docker-software-delivery@1.0.0 build /app
item-app    | > node ./node_modules/gulp/bin/gulp.js
item-app    | 
item-app    | [15:21:19] Using gulpfile /app/gulpfile.js
item-app    | [15:21:19] Starting 'scripts'...
item-app    | [15:21:32] Finished 'scripts' after 13 s
item-app    | [15:21:32] Starting 'default'...
item-app    | [15:21:32] Finished 'default' after 156 Î¼s
item-app    | 
item-app    | > docker-software-delivery@1.0.0 start /app
item-app    | > node ./bin/www
item-app    | 
item-app    | NODE_ENV: production
item-db     | 2023-03-17T15:21:34.436+0000 I NETWORK  [listener] connection accepted from 172.21.0.2:50882 #1 (1 connection now open)
item-db     | 2023-03-17T15:21:34.450+0000 I NETWORK  [conn1] received client metadata from 172.21.0.2:50882 conn1: { driver: { name: "nodejs", version: "2.2.36" }, os: { type: "Linux", name: "linux", architecture: "x64", version: "5.15.49-linuxkit" }, platform: "Node.js v14.21.3, LE, mongodb-core: 2.1.20" }
item-app    | Connected to database
item-app    | GET /tutorial/ 404 748.614 ms - 270
item-app    | GET /javascripts/accumulator.js 200 126.611 ms - 697
item-app    | GET /javascripts/vendor/angular.min.js 200 33.011 ms - 166021
item-app    | GET /stylesheets/style.css 200 210.942 ms - 519
item-app    | GET /favicon.ico 404 3.246 ms - 270
item-app    | GET /assets/stylesheets/application.adb8469c.css 404 22.729 ms - 270
item-app    | GET /assets/stylesheets/application-palette.a8b3c06d.css 404 45.690 ms - 270
item-app    | GET /tutorial/ 404 1.886 ms - 270
item-app    | GET /assets/fonts/font-awesome.css 404 4.190 ms - 270
item-app    | GET /stylesheets/style.css 304 5.804 ms - -
item-app    | GET /javascripts/vendor/angular.min.js 304 2.526 ms - -
item-app    | GET /javascripts/accumulator.js 304 3.468 ms - -
item-app    | GET /assets/stylesheets/application.adb8469c.css 404 2.405 ms - 270
item-app    | GET /assets/stylesheets/application-palette.a8b3c06d.css 404 62.385 ms - 270
item-app    | GET /assets/fonts/font-awesome.css 404 53.213 ms - 270
item-app    | GET /assets/javascripts/application.c33a9706.js 404 10.318 ms - 270
item-app    | GET /tutorial/ 404 1.449 ms - 270
item-app    | GET /javascripts/accumulator.js 304 2.586 ms - -
item-app    | GET /stylesheets/style.css 304 27.797 ms - -
item-app    | GET /javascripts/vendor/angular.min.js 304 5.524 ms - -
item-app    | GET / 200 199.370 ms - 785
item-app    | GET /stylesheets/style.css 200 3.232 ms - 519
item-app    | GET /javascripts/dist/dist.min.js 200 4.023 ms - 186999
item-app    | GET /api 200 57.312 ms - 2
item-db     | 2023-03-17T15:23:14.689+0000 I NETWORK  [listener] connection accepted from 172.21.0.2:60220 #2 (2 connections now open)
item-app    | GET /favicon.ico 404 7.993 ms - 270
item-db     | 2023-03-17T15:23:24.860+0000 I STORAGE  [conn1] createCollection: accumulator.documents with generated UUID: 1cbe4d23-dd15-4bbd-a2dd-6659da6a9bc8
item-db     | 2023-03-17T15:23:25.097+0000 I COMMAND  [conn1] command accumulator.documents command: insert { insert: "documents", ordered: true, $db: "accumulator" } ninserted:1 keysInserted:1 numYields:0 reslen:44 locks:{ Global: { acquireCount: { r: 3, w: 3 } }, Database: { acquireCount: { w: 2, W: 1 } }, Collection: { acquireCount: { w: 2 } } } protocol:op_query 237ms
item-app    | POST /api 201 282.805 ms - 51
item-app    | GET / 200 1.525 ms - 785
